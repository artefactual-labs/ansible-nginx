#{{ ansible_managed }}

#
# Use nginx_use_geoip_request_limit
# Depends on map_geoip.conf file
# Define maps and configure rate limits based on geoip Countries and ASN
#

{% if nginx_use_geoip_request_limit|bool and ansible_os_family == 'Debian' %}

# GeoIP2 Configuration
geoip2 /etc/nginx/geoip/GeoLite2-ASN.mmdb {
  auto_reload 60m;
  $geoip2_data_asn autonomous_system_number;
  $geoip2_data_asn_org autonomous_system_organization;
}

geoip2 /etc/nginx/geoip/GeoLite2-City.mmdb {
  auto_reload 60m;
  $geoip2_data_country country iso_code;
}


# Define conditions for rate limiting
map $geoip2_data_country$host $limit_country {
  default "";
  include /etc/nginx/rate-limits/exceptions/geoip_country_host_exception_*.conf; # Load per-site country exceptions
{%   for v in nginx_geoip_country_list %}
  {{ v }} 1;
{%   endfor %}
}

map $geoip2_data_asn$host $limit_asn {
  default "";
  include /etc/nginx/rate-limits/exceptions/geoip_asn_host_exception_*.conf; # Load per-site ans exceptions
{%   for v in nginx_geoip_asn_list %}
  {{ v }} 1;
{%   endfor %}
}

# Combine conditions for rate limiting
map "$limit_country$limit_asn" $geoip_rate_limit {
  default "";
  ~.+ "geoip_zone"; # Static key for global rate limiting
}

# Rate limits
limit_req_zone $geoip_rate_limit zone=geoip_zone:{{ nginx_geoip_request_limit_rate_shared_memory_zone }} rate={{ nginx_geoip_request_limit_rate  }};
limit_req zone=geoip_zone burst={{ nginx_geoip_request_limit_burst }} nodelay;


{% endif %}

#
# End nginx_use_geoip_request_limit
#

#
# Use bots request limit
# Define per-IP rate limiting for suspected bots based on User-Agent patterns.
#

{% if nginx_use_bots_request_limit|bool %}
map "$http_user_agent$host" $isbot_ua {
  default "";
  include /etc/nginx/rate-limits/exceptions/bots_user_agent_host_exception_*.conf; # Load per-site bot exceptions
  # Regex from: https://observablehq.com/@hugodf/crawler-regex
  # Needs to escape black spaces and split in several regex, it can help:
  # Copy regex to file and run: cat regex  | sed 's/\ /\\\ /g' | sed -e 's/.\{300\}/&\n\n/g' > regex_fixed
  # Curl and wget removed
{%  for v in nginx_bots_request_limit_user_agents_regex %}
  ~*{{ v }} 1;
{%  endfor %}
}

map $isbot_ua $limit_bot {
  0       "";
  # Use $http_x_forwarded_for instead of $binary_remote_addr when using reverse proxy
{%  if nginx_bots_request_limit_use_x_forwarded_for|bool %}
  ~.+     $http_x_forwarded_for;
{%  else %}
  ~.+     $binary_remote_addr;
{%  endif %}
}

limit_req_zone $limit_bot zone=bots:{{ nginx_bots_request_limit_shared_memory_zone }} rate={{ nginx_bots_request_limit_rate }};
limit_req zone=bots burst={{ nginx_bots_request_limit_burst }} nodelay;

{% endif %}

#
# End bots request limit
#

#
# Use default request limit
#

{% if nginx_use_default_request_limit|bool %}
{%   if nginx_default_request_limit_use_x_forwarded_for|bool %}
limit_req_zone $http_x_forwarded_for zone=one:{{ nginx_default_request_limit_shared_memory_zone }} rate={{ nginx_default_request_limit_rate  }};
{%      else %}
limit_req_zone $binary_remote_addr zone=one:{{ nginx_default_request_limit_shared_memory_zone }} rate={{ nginx_default_request_limit_rate  }};
{%      endif %}
limit_req zone=one burst={{ nginx_default_request_limit_burst }} nodelay;
{% endif %}

#
# End use default request limit
#

# Set request limit status
{% if nginx_use_geoip_request_limit|bool or nginx_use_bots_request_limit|bool or nginx_use_default_request_limit|bool %}
limit_req_status {{ nginx_request_limit_status }};
{% endif %}
