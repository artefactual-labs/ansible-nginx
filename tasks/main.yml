---
- name: Configure repositories
  block:
    - name: "Add epel-release repository (RHEL)"
      yum:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version|int }}.noarch.rpm"
        state: "present"
      when: ansible_distribution == 'RedHat'

    - name: "Add epel-release repository (CentOS/Rocky)"
      yum:
        name: "epel-release"
        state: "latest"
      when:
        - ansible_distribution not in ['RedHat']
        - ansible_os_family in ['RedHat','Rocky']
  when: install_rpm_repositories|bool

- name: Install the nginx packages
  yum:
    name: "{{ redhat_pkg }}"
    state: "present"
  when: ansible_os_family in ['RedHat', 'Rocky']
  tags: [packages,nginx]

# See: https://bugzilla.redhat.com/show_bug.cgi?id=1984713
- name: Install openssl11-libs package (RHEL7)
  yum:
    name: "openssl11-libs"
    state: "present"
  when:
    - ansible_distribution == 'RedHat'
    - ansible_distribution_major_version is version_compare('7','==')
  tags: [packages,nginx]

- name: Install the nginx packages
  apt:
    name: "{{ ubuntu_pkg }}"
    state: "present"
    update_cache: yes
  when: ansible_os_family == "Debian" and ansible_distribution_version is version_compare('18.04', '<=')
  tags: [packages,nginx]

- name: Install the nginx packages
  apt:
    name: "{{ ubuntu_focal_pkg }}"
    state: "present"
    update_cache: yes
  when: ansible_os_family == "Debian" and ansible_distribution_version is version_compare('20.04', '>=')
  tags: [packages,nginx]

- name: Create the directories for site specific configurations
  file: path=/etc/nginx/{{ item }} state=directory owner=root group={{nginx_group}} mode=0755
  with_items:
    - "sites-available"
    - "sites-enabled"
    - "auth_basic"
  tags: [configuration,nginx]

- name: Ensure log directory exist
  file: path={{ nginx_log_dir }} state=directory owner={{nginx_user}} group={{nginx_group}} mode=0755
  tags: [configuration,nginx]

- name: Copy the nginx configuration file
  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf
  notify:
   - Restart nginx
  tags: [configuration,nginx]

- name: Ensure auth_basic files created
  template: src=auth_basic.j2 dest=/etc/nginx/auth_basic/{{ item }} owner=root group={{nginx_group}} mode=0750
  with_items: "{{ nginx_auth_basic_files.keys() | list }}"
  tags: [configuration,nginx]

- name: Create the configurations for sites
  template: src=site.conf.j2 dest=/etc/nginx/sites-available/{{ item }}.conf
  with_items: "{{ nginx_sites.keys() | list }}"
  notify:
   - Reload nginx
  tags: [configuration,nginx]

- name: Create links for sites-enabled
  file: state=link src=/etc/nginx/sites-available/{{ item }}.conf dest=/etc/nginx/sites-enabled/{{ item }}.conf
  with_items: "{{ nginx_sites.keys() | list }}"
  notify:
   - Reload nginx
  tags: [configuration,nginx]

- name: Disable the default site
  file: path=/etc/nginx/sites-enabled/default state=absent
  when: nginx_sites.keys() | list  != []
  notify:
   - Reload nginx
  tags: [configuration,nginx]

- name: Create the configurations for independante config file
  template: src=config.conf.j2 dest=/etc/nginx/conf.d/{{ item }}.conf
  with_items: "{{ nginx_configs.keys() | list  }}"
  notify:
   - Reload nginx
  tags: [configuration,nginx]

- include_tasks: "robots-txt.yml"
  when:
    - "nginx_use_global_robots_txt|bool"
  tags: [nginx-global-robots-txt,nginx]

- include_tasks: "badbots.yml"
  when:
    - "nginx_use_bots_deny_list|bool"
  tags: [nginx-badbots,nginx]

- include_tasks: "default-deny.yml"
  when: 
    - "nginx_use_default_deny | bool"
  tags: [configuration,nginx]

- name: Check nginx syntax of configuration files
  shell: nginx -t
  register: result
  changed_when: "result.rc != 0"
  check_mode: no
  tags: [configuration,nginx]

- name: Start the nginx service
  service: name=nginx state=started enabled=yes
  tags: [service,nginx]
